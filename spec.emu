<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="https://bterlson.github.io/ecmarkup/ecmarkup.js"></script>
<link rel="stylesheet" href="https://bterlson.github.io/ecmarkup/elements.css">
<pre class="metadata">
title: ECMAScript Try Operator
status: proposal
stage: 0
contributors: Arthur Fiorette, Arlen Beiler
</pre>

<emu-intro id="sec-intro">
  <h1>Introduction</h1>
  <p>This proposal introduces a `try` operator and `Result` class to JavaScript for improved error handling ergonomics. The `try` operator evaluates an expression within an implicit try-catch block and returns a `Result` instance containing either the successful value or the caught error.</p>
</emu-intro>

<emu-clause id="sec-result-objects">
  <h1>Result Objects</h1>

  <emu-clause id="sec-result-constructor">
    <h1>The Result Constructor</h1>
    <p>The Result constructor is not intended to be called as a constructor. It throws a *TypeError* exception if called with `new`.</p>

    <emu-clause id="sec-result">
      <h1>Result ( )</h1>
      <p>When `Result` is called, the following steps are taken:</p>
      <emu-alg>
        1. Throw a *TypeError* exception.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-the-result-constructor">
    <h1>Properties of the Result Constructor</h1>

    <emu-clause id="sec-result.ok">
      <h1>Result.ok ( _value_ )</h1>
      <p>When the `Result.ok` method is called with argument _value_, the following steps are taken:</p>
      <emu-alg>
        1. Let _result_ be OrdinaryObjectCreate(%Result.prototype%, « [[ResultState]], [[ResultValue]] »).
        1. Set _result_.[[ResultState]] to ~success~.
        1. Set _result_.[[ResultValue]] to _value_.
        1. Return _result_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-result.error">
      <h1>Result.error ( _error_ )</h1>
      <p>When the `Result.error` method is called with argument _error_, the following steps are taken:</p>
      <emu-alg>
        1. Let _result_ be OrdinaryObjectCreate(%Result.prototype%, « [[ResultState]], [[ResultError]] »).
        1. Set _result_.[[ResultState]] to ~failure~.
        1. Set _result_.[[ResultError]] to _error_.
        1. Return _result_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-result.try">
      <h1>Result.try ( _fn_, ..._args_ )</h1>
      <p>When the `Result.try` method is called with argument _fn_ and optional arguments _args_, the following steps are taken:</p>
      <emu-alg>
        1. If IsCallable(_fn_) is *false*, throw a *TypeError* exception.
        1. Let _result_ be Completion(Call(_fn_, *undefined*, _args_)).
        1. If _result_ is an abrupt completion, then
          1. Return ! Call(%Result.error%, %Result%, « _result_.[[Value]] »).
        1. Else,
          1. Return ! Call(%Result.ok%, %Result%, « _result_.[[Value]] »).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-result.prototype">
      <h1>Result.prototype</h1>
      <p>The initial value of `Result.prototype` is the Result prototype object.</p>
      <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.</p>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-the-result-prototype-object">
    <h1>Properties of the Result Prototype Object</h1>
    <p>The Result prototype object:</p>
    <ul>
      <li>is an ordinary object.</li>
      <li>is not a Result instance and does not have [[ResultState]], [[ResultValue]], or [[ResultError]] internal slots.</li>
      <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>
    </ul>

    <emu-clause id="sec-result.prototype.ok">
      <h1>get Result.prototype.ok</h1>
      <p>`Result.prototype.ok` is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:</p>
      <emu-alg>
        1. Let _result_ be the *this* value.
        1. Perform ? RequireInternalSlot(_result_, [[ResultState]]).
        1. If _result_.[[ResultState]] is ~success~, return *true*.
        1. Return *false*.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-result.prototype.value">
      <h1>get Result.prototype.value</h1>
      <p>`Result.prototype.value` is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:</p>
      <emu-alg>
        1. Let _result_ be the *this* value.
        1. Perform ? RequireInternalSlot(_result_, [[ResultState]]).
        1. If _result_.[[ResultState]] is ~failure~, throw a *TypeError* exception.
        1. Return _result_.[[ResultValue]].
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-result.prototype.error">
      <h1>get Result.prototype.error</h1>
      <p>`Result.prototype.error` is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:</p>
      <emu-alg>
        1. Let _result_ be the *this* value.
        1. Perform ? RequireInternalSlot(_result_, [[ResultState]]).
        1. If _result_.[[ResultState]] is ~success~, throw a *TypeError* exception.
        1. Return _result_.[[ResultError]].
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-result.prototype-@@iterator">
      <h1>Result.prototype [ %Symbol.iterator% ] ( )</h1>
      <p>When the %Symbol.iterator% method is called, the following steps are taken:</p>
      <emu-alg>
        1. Let _result_ be the *this* value.
        1. Return ? CreateResultIterator(_result_).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-result.prototype.constructor">
      <h1>Result.prototype.constructor</h1>
      <p>The initial value of `Result.prototype.constructor` is %Result%.</p>
    </emu-clause>

    <emu-clause id="sec-result.prototype-@@toStringTag">
      <h1>Result.prototype [ %Symbol.toStringTag% ]</h1>
      <p>The initial value of the %Symbol.toStringTag% property is the String value *"Result"*.</p>
      <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.</p>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-result-iterator-objects">
    <h1>Result Iterator Objects</h1>
    <p>A Result Iterator is an object that represents a specific iteration over a Result instance. There is not a named constructor for Result Iterator objects.</p>

    <emu-clause id="sec-createresultiterator" type="abstract operation">
      <h1>
        CreateResultIterator (
          _result_: a Result object,
        ): either a normal completion containing a Result Iterator or a throw completion
      </h1>
      <dl class="header">
      </dl>
      <emu-alg>
        1. Perform ? RequireInternalSlot(_result_, [[ResultState]]).
        1. Let _iterator_ be OrdinaryObjectCreate(%ResultIteratorPrototype%, « [[IteratedResult]], [[ResultIteratorNextIndex]] »).
        1. Set _iterator_.[[IteratedResult]] to _result_.
        1. Set _iterator_.[[ResultIteratorNextIndex]] to 0.
        1. Return _iterator_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-%resultiteratorprototype%-object">
      <h1>The %ResultIteratorPrototype% Object</h1>
      <p>The %ResultIteratorPrototype% object:</p>
      <ul>
        <li>has a [[Prototype]] internal slot whose value is %IteratorPrototype%.</li>
        <li>is an ordinary object.</li>
      </ul>

      <emu-clause id="sec-%resultiteratorprototype%.next">
        <h1>%ResultIteratorPrototype%.next ( )</h1>
        <emu-alg>
          1. Let _iterator_ be the *this* value.
          1. Perform ? RequireInternalSlot(_iterator_, [[IteratedResult]]).
          1. Let _result_ be _iterator_.[[IteratedResult]].
          1. Let _index_ be _iterator_.[[ResultIteratorNextIndex]].
          1. If _index_ is 0, then
            1. Set _iterator_.[[ResultIteratorNextIndex]] to 1.
            1. Return CreateIteratorResultObject(_result_.[[ResultState]] is ~success~, *false*).
          1. Else if _index_ is 1, then
            1. Set _iterator_.[[ResultIteratorNextIndex]] to 2.
            1. If _result_.[[ResultState]] is ~success~, return CreateIteratorResultObject(*undefined*, *false*).
            1. Else, return CreateIteratorResultObject(_result_.[[ResultError]], *false*).
          1. Else if _index_ is 2, then
            1. Set _iterator_.[[ResultIteratorNextIndex]] to 3.
            1. If _result_.[[ResultState]] is ~success~, return CreateIteratorResultObject(_result_.[[ResultValue]], *false*).
            1. Else, return CreateIteratorResultObject(*undefined*, *false*).
          1. Else,
            1. Return CreateIteratorResultObject(*undefined*, *true*).
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-%resultiteratorprototype%-@@toStringTag">
        <h1>%ResultIteratorPrototype% [ %Symbol.toStringTag% ]</h1>
        <p>The initial value of the %Symbol.toStringTag% property is the String value *"Result Iterator"*.</p>
        <p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.</p>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-try-operator">
  <h1>The Try Operator</h1>

  <emu-clause id="sec-try-operator-runtime-semantics">
    <h1>Runtime Semantics</h1>

    <emu-clause id="sec-try-operator-static-semantics">
      <h1>Static Semantics</h1>
      <emu-grammar>
        UnaryExpression[Yield, Await] :
          `try` UnaryExpression[?Yield, ?Await]
      </emu-grammar>
    </emu-clause>

    <emu-clause id="sec-try-operator-evaluation" type="sdo">
      <h1>Runtime Semantics: Evaluation</h1>
      <emu-grammar>UnaryExpression : `try` UnaryExpression</emu-grammar>
      <emu-alg>
        1. Let _expr_ be the result of evaluating |UnaryExpression|.
        1. If _expr_ is an abrupt completion, then
          1. Return ! Call(%Result.error%, %Result%, « _expr_.[[Value]] »).
        1. Let _value_ be ! GetValue(_expr_).
        1. If _value_ is an abrupt completion, then
          1. Return ! Call(%Result.error%, %Result%, « _value_.[[Value]] »).
        1. Return ! Call(%Result.ok%, %Result%, « _value_ »).
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-try-operator-await-interaction">
    <h1>Interaction with Await</h1>
    <p>When the try operator is used with await, it captures both synchronous exceptions and asynchronous rejections.</p>

    <emu-grammar>UnaryExpression : `try` `await` UnaryExpression</emu-grammar>
    <emu-alg>
      1. Let _exprRef_ be the result of evaluating |UnaryExpression|.
      1. Let _value_ be ? GetValue(_exprRef_).
      1. Let _promise_ be ? PromiseResolve(%Promise%, _value_).
      1. Let _fulfillmentHandler_ be a new Abstract Closure with parameters (_value_) that captures nothing and performs the following steps when called:
        1. Return ! Call(%Result.ok%, %Result%, « _value_ »).
      1. Let _rejectionHandler_ be a new Abstract Closure with parameters (_reason_) that captures nothing and performs the following steps when called:
        1. Return ! Call(%Result.error%, %Result%, « _reason_ »).
      1. Let _promiseFulfill_ be CreateBuiltinFunction(_fulfillmentHandler_, 1, *""*, « »).
      1. Let _promiseReject_ be CreateBuiltinFunction(_rejectionHandler_, 1, *""*, « »).
      1. Return ? Await(PerformPromiseThen(_promise_, _promiseFulfill_, _promiseReject_)).
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-syntax-directed-operations">
  <h1>Syntax-Directed Operations</h1>

  <emu-clause id="sec-isvalidsimpleassignmenttarget" type="sdo">
    <h1>Static Semantics: IsValidSimpleAssignmentTarget</h1>
    <emu-grammar>UnaryExpression : `try` UnaryExpression</emu-grammar>
    <emu-alg>
      1. Return *false*.
    </emu-alg>
  </emu-clause>
</emu-clause>

<emu-annex id="sec-grammar-summary">
  <h1>Grammar Summary</h1>

  <emu-annex id="sec-expressions">
    <h1>Expressions</h1>

    <emu-prodref name="UnaryExpression"></emu-prodref>
    <emu-grammar>
      UnaryExpression[Yield, Await] :
        UpdateExpression[?Yield, ?Await]
        `delete` UnaryExpression[?Yield, ?Await]
        `void` UnaryExpression[?Yield, ?Await]
        `typeof` UnaryExpression[?Yield, ?Await]
        `+` UnaryExpression[?Yield, ?Await]
        `-` UnaryExpression[?Yield, ?Await]
        `~` UnaryExpression[?Yield, ?Await]
        `!` UnaryExpression[?Yield, ?Await]
        <ins>`try` UnaryExpression[?Yield, ?Await]</ins>
        [+Await] AwaitExpression[?Yield]
    </emu-grammar>
  </emu-annex>
</emu-annex>